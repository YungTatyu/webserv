; basic rules
ALPHA	= "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" / "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" / "Y" / "Z"
alpha = "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z"
VCHAR	= %x21-7E ; visible (printing) characters
VCHAR-IN-PATH	= (VCHAR - "/") ; VCHARから"/"を除く
DIGIT	= "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9"
hexdig = DIGIT / "A" / "B" / "C" / "D" / "E" / "F" / "a" / "b" / "c" / "d" / "e" / "f"
WS	= " " / "\t" / NEWLINE ;スペース、水平タブまたは改行
OWS	= *(WS) ;optional ws
h16 = 1*4HEXDIG
NEWLINE	= "\n"
alphadigit = ALPHA / alpha / DIGIT ;アルファベットまたは数字
status	= 3(DIGIT)
END_DIRECTIVE	= ";"

absolute-path	= "/" *(path-segment)
path-segment	= 1*( VCHAR-IN-PATH ) ["/"]
uri	= absolute-path ;表記は同じだが、uriはrootの後に追加される root/uri
path	= absolute-path / uri 
file	= uri

time	= 1*(DIGIT) ["ms" / "s" / "m" / "h"]
size	= 1*(DIGIT) ["k" / "K" / "m" / "M"]
url	= scheme "://" host
scheme	= "http" / "https";
host	= VCHAR

ip-address	= ip-address "/" "0"-"32"
on-off	= "ON" / "OFF"
method	= "GET" / "HEAD" / "PUT" / "DELETE" ;Allowing the GET method makes the HEAD method also allowed

;ip rules
ip-address = IPv4-address / IPv6-address
IPv4-address = dec-octet "." dec-octet "." dec-octet "." dec-octet
dec-octet = DIGIT / "1"-"9" DIGIT / "1" DIGIT DIGIT / "2" "0"-"4" DIGIT / "25" "0"-"5" ; 0~255
IPv6-address	= 6( h16 ":" ) ls32
			/ "::" 5( h16 ":" ) ls32
			/ [               h16 ] "::" 4( h16 ":" ) ls32
			/ [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
			/ [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
			/ [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
			/ [ *4( h16 ":" ) h16 ] "::"              ls32
			/ [ *5( h16 ":" ) h16 ] "::"              h16
			/ [ *6( h16 ":" ) h16 ] "::"

ls32	= ( h16 ":" h16 ) / IPv4address ;()はグループを示すので、右を期待する→ 16進数:16進数
h16 = 1*4(HEXDIG) ;HEXDIGが1回から4回まで続く
IPv4-subnetmask	= 0-32
IPv6-prefix	= 0-128

; syntax definition
main-context	= events-directive [ *(WS) http-context *(OWS)] [*(WS) errorlog-directive *(OWS)]
http-context	= 1("http" OWS "{" OWS *(server-context) *(http-directive) OWS "}") ;webサーバ全体の設定
comment	= "#" *(VCHAR) NEWLINE ; NEWLINEまでコメントアウト

errorlog-directive	= "error_log" *1(WS) file OWS END_DIRECTIVE ;Default: logs/error.log error
level	= "warn" / "error" / "emerg" ;指定したlevel以上を出力する
send-timeout-directive	= "send_timeout" *1(WS) time END_DIRECTIVE;Default: 60s
keepalive-time-directive	= "keepalive_time" *1(WS) time END_DIRECTIVE
root-directive	= "root" *1(WS) absolute-path OWS END_DIRECTIVE
keepalive-timeout-directive	= "keepalive_timeout" *1(WS) time OWS END_DIRECTIVE;Default: 75s
display-dir-list-directive	= "autoindex" *1(WS) on-off OWS END_DIRECTIVE
client-max-body-size-directive	= "client_max_body_size" *1(WS) size OWS END_DIRECTIVE ;Default:1m, size to 0 disables checking of client 
;リクエストがディレクトリ(/)に対するもののレスポンスを設定。複数のファイルが存在する場合左から順に探す
index-file-directive	= "index" *1(WS) 1*(file) OWS END_DIRECTIVE

error-page-directive	= "error_page" *1(WS) error-codes ["=" status] WS uri OWS END_DIRECTIVE
error-codes = error-code *(SP error-code)
error-code	= status

permission-directive	= permission *1(WS) permission-target OWS END_DIRECTIVE
permission-target	= IPv4-address "/" IPv4-subnetmask / IPv6-address "/" IPv6-prefix / all 
permission	= "allow" / "deny"

http-directive	= errorlog-directive
				/ send-timeout-directive
				/ keepalive-time-directive
				/ keepalive-timeout-directive
				/ root-directive
				/ client-max-body-size-directive
				/ permission-directive
				/ display-dir-list-directive
				/ index-file-directive

events-context	= 1("events" OWS "{" OWS *(events-directive) OWS "}")
events-directive	= *1(worker-connections-directive)
					/ *1(use-directive)
worker-connections-directive	= "worker_connections" *1(WS) 1*(DIGIT) END_DIRECTIVE
use-directive	= "use" *1(WS) connection-method OWS END_DIRECTIVE
connection-method	= "select" / "poll" / "kqueue" / "epoll" 

server-context	= "server" OWS "{" OWS *(server-directive) OWS "}" ;{}の中が空も許容する
server-directive	= location-context
					/ listen-directive
					/ server-name-directive
					/ send-timeout-directive
					/ keepalive-time-directive
					/ keepalive-timeout-directive
					/ error-page-directive
					/ root-directive
					/ client-max-body-size-directive
					/ permission-directive
					/ display-dir-list-directive
					/ index-file-directive
					/ return-directive

listen-directive	= "listen" *1(WS) address-port OWS END_DIRECTIVE
address-port	= address [ ":" port ] / port ;デフォルトaddress:0.0.0.0 デフォルトport:80
address	=  "*" / "localhost" / ip-address
port	= 1*(DIGIT)  ;少なくとも1回のDIGITが続くシーケンス

server-name-directive	= "server_name" 1*(WS VCHAR) OWS END_DIRECTIVE ; The first name becomes the primary server name

location-context	= "location" *1(WS) uri "{" OWS *(location-directive) OWS "}"
location-directive	= root-directive
				/ error-page-directive 
				/ return-directive
				/ limit-except-context
				/ permission-directive
				/ display-dir-list-directive
				/ index-file-directive
				/ client-max-body-size-directive
				/ errorlog-directive
				/ send-timeout-directive
				/ keepalive-time-directive
				/ keepalive-timeout-directive


return-directive	= "return" *1(WS) status *1(WS) uri OWS END_DIRECTIVE ; redirectで使用

limit-except-context	= "limit_except" *1(WS)  method OWS "{" OWS *(permission-directive) OWS "}"